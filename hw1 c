#include <stdlib.h>
#include <stdio.h>
#include <math.h>

struct cord
{
    double value;
    struct cord *next;
};
struct vector
{
    struct vector *next;
    struct cord *cords;
};


int is_int(const char *str){
    while (*str){
        if (!isdigit(*str)){
            return 0;
        }
        str++;
    }
    return 1;
}

int main(int argc, char **argv)
{
    const iter;
    const k;
    int N = 0;

    if (argc != 3 && argc != 2) {
        printf("An Error Has Occurred")
        return 1;
    }

    if (argc == 3){
        iter = argv[2];
        k = argv[1];
        if (is_int(iter) == 0 || iter <= 1 || iter >= 1000){
            printf("Invalid maximum iteration!")
            return 1;
        }
        if (is_int(k) == 0 || k <= 1){
            printf("Invalid number of clusters!")
            return 1;
        }
    }

        if (argc == 2){
        iter = 200;
        k = argv[1];
        if (is_int(k) == 0 || k <= 1){
            printf("Invalid number of clusters!")
            return 1;
        }
    }

// remember to check after that k <= N

    


    struct vector *head_vec, *curr_vec, *next_vec;
    struct cord *head_cord, *curr_cord, *next_cord;
    int i, j, rows = 0, cols;
    double n;
    char c;

    head_cord = malloc(sizeof(struct cord));
    curr_cord = head_cord;
    curr_cord->next = NULL;

    head_vec = malloc(sizeof(struct vector));
    curr_vec = head_vec;
    curr_vec->next = NULL;


    while (scanf("%lf%c", &n, &c) == 2)
    {

        if (c == '\n')
        {
            curr_cord->value = n;
            curr_vec->cords = head_cord;
            curr_vec->next = malloc(sizeof(struct vector));
            curr_vec = curr_vec->next;
            curr_vec->next = NULL;
            head_cord = malloc(sizeof(struct cord));
            curr_cord = head_cord;
            curr_cord->next = NULL;
            continue;
        }

        curr_cord->value = n;
        curr_cord->next = malloc(sizeof(struct cord));
        curr_cord = curr_cord->next;
        curr_cord->next = NULL;
    }

    return 0;
}
